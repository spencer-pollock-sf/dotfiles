#!/usr/bin/env python3
# encoding: utf-8
#
#    ^...^ 
#   / o,o \
#   |):::(|
# ====w=w====
# By: Spencer Pollock <spencer at spollock dot ca>
# 

'''
Python Standard Libraries
'''

import argparse
import asyncio
import configparser
import datetime
import glob
import json
import hmac
import hashlib
import logging
import multiprocessing
import random
import re
import shlex
import smtplib
import subprocess
import sys
import threading
import time
import os
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

'''
Libraries
'''
import psutil
from dotenv import load_dotenv

'''
Global variables
'''
DEBUG = False
VERBOSE = False

DEFAULT_EMAIL_LIST = ''
TO_EMAIL = None
CC_EMAIL = None
EMAIL_SUBJECT = None
EMAIL_BODY = None

load_dotenv()

'''
Functions
'''
def reboot_message():
    return 'Server has rebooted.'

def discord_webhook():
    '''
    Warning The shlex module is only designed for Unix shells.
    The quote() function is not guaranteed to be correct on non-POSIX compliant shells or shells from other operating systems such as Windows. Executing commands quoted by this module on such shells can open up the possibility of a command injection vulnerability.

    Consider using functions that pass command arguments with lists such as subprocess.run() with shell=False.
    '''
    # not_remote_command = 'ssh home {}'.format(shlex.quote(command))
    global EMAIL_BODY
    command = 'curl -0 -v -X POST -H \"Expect:\" -H \"Content-Type: application/json\" --data \'{}\' {}'.format(json.dumps({'content': EMAIL_BODY}, indent = 4), os.getenv('DISCORD_WEBHOOK_URL'))
    print (command)
    status, output = subprocess.getstatusoutput(command)
    return status, output

'''
Classes
'''

'''
Main runners
'''
def get_args():
    '''
    A good Python example script.
    '''
    parser = argparse.ArgumentParser(description='A fancy description goes here for your script.')
    parser.add_argument('--config', dest='configfile', type=str, default='default.cfg', help='Config file to use. Local Global: DEFAULT_CONFIG to \'default.cfg\'.')
    parser.add_argument('--debug', dest='debug', action='store_true', help='Runs debug statements and checks without processing.') # NOTE: to be implemented later
    parser.add_argument('--verbose', dest='verbose', action='store_true', help='Runs the script in verbose mode.') 
    return parser.parse_args()

def main(args):
    '''
    Main function for running.
    '''
    global DEBUG
    global VERBOSE
    global TO_EMAIL
    global CC_EMAIL
    global EMAIL_SUBJECT
    global EMAIL_BODY
    DEBUG = args.debug
    VERBOSE = args.verbose
    if (VERBOSE):
        print ('Verbose is {}'.format(VERBOSE))
        logging.debug('Verbose is {}'.format(VERBOSE))
    if (args.configfile == 'default.cfg'):
        config = configparser.ConfigParser()
        config.read(os.path.abspath(os.path.join(os.path.dirname(__file__), 'default.cfg')))
    else:
        config = configparser.ConfigParser()
        config.read(os.path.abspath(os.path.join(os.path.dirname(__file__), args.configfile)))
    # Start main
    output = reboot_message()
    TO_EMAIL = config['DEFAULT']['TO_EMAIL']
    CC_EMAIL = config['DEFAULT']['CC_EMAIL']
    EMAIL_SUBJECT = config['DEFAULT']['EMAIL_SUBJECT']
    EMAIL_BODY = config['DEFAULT']['EMAIL_BODY'].format(output)
    if not DEBUG:
        output = discord_webhook()
        logging.log(logging.INFO, "[**] Output:")
        logging.log(logging.INFO, output)
    else:
        logging.log(logging.DEBUG, "[**] Output:")
        logging.log(logging.DEBUG, output)
    # End main
    return 0

if __name__ == '__main__':
    logging.basicConfig(format='%(asctime)s - %(message)s', filename='sys_info.log', level=logging.DEBUG, datefmt='%Y-%m-%d %H:%M:%S')
    args = get_args()
    main(args)
    logging.shutdown()
    sys.exit(0)
    # End of file